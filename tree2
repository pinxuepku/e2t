



void codeGen(Node* r){
    int len=r->mem.size();
    for(int i=0;i<len;i++){
        if(r->mem[i]->node_type==NODE_TYPE_DECLARE){
            codeGen_global_declare(r->mem[i]);
            continue;
        }
        if(r->mem[i]->node_type==NODE_TYPE_FUNCDEF){
            Node* func=r->mem[i];
            Node* statements=func->children[2];
            int len2=statements->mem.size();
            memset(record,-1,sizeof(record));
            int sym_num=func->local_symtab.size();
            for(int j=0;j<sym_num;j++){
                if(func->local_symtab[j]->param_index>0){
                    allocate(func,j);
                }
            }
            cout<<func->children[0]->name<<" ["<<func->children[1]->val<<endl<<"]["<<func->stack_size<<"]"<<endl;
            for(int j=0;j<len2;j++){
                if(statements->mem[j]->node_type==NODE_TYPE_DECLARE){
                    continue;
                }
                Node* st=statements->mem[j];
                for(int k=0;k<sym_num;k++){
                    if(st->live[k]==1 && func->local_symtab[k]->reg==0){
                        int alloc_reg=allocate(func,k);
                        if(alloc_reg>=9 && alloc_reg<=11){
                            break;
                        }
                        if(func->local_symtab[k]->is_global==1){
                            if(func->local_symtab[k]->array_size==0){
                                cout<<"load v"<<func->local_symtab[k]->global_index<<" "<<regs[alloc_reg]<<endl;
                            }else{
                                cout<<"loadaddr v"<<func->local_symtab[k]->global_index<<" "<<regs[alloc_reg]<<endl;
                            }
                        }else{
                            if(func->local_symtab[k]->array_size==0){
                                cout<<"load "<<func->local_symtab[k]->stack_location<<" "<<regs[alloc_reg]<<endl;
                            }else{
                                cout<<"loadaddr "<<func->local_symtab[k]->stack_location<<" "<<regs[alloc_reg]<<endl;
                            }
                        }
                    }
                }
                delete_reg(func,j,record[9]);
                delete_reg(func,j,record[10]);
                delete_reg(func,j,record[11]);
                if(st->exp_type==1){
                    codeGen_1(func,st,j);
                }else if(st->exp_type==2){
                    codeGen_2(func,st,j);
                }else if(st->exp_type==3){
                    codeGen_3(func,st,j);
                }else if(st->exp_type==4){
                    codeGen_4(func,st,j);
                }else if(st->exp_type==5){
                    codeGen_5(func,st,j);
                }else if(st->exp_type==6){
                    codeGen_6(func,st,j);
                }else if(st->exp_type==7){
                    codeGen_7(func,st,j);
                }else if(st->exp_type==8){
                    codeGen_8(func,st,j);
                }else if(st->exp_type==9){
                    codeGen_9(func,st,j);
                }else if(st->exp_type==10){
                    codeGen_10(func,st,j);
                }else if(st->exp_type==11){
                    codeGen_11(func,st,j);
                }else if(st->exp_type==12){
                    codeGen_12(func,st,j);
                }else if(st->exp_type==13){
                    codeGen_13(func,st,j);
                }
            }
            cout<<"end "+func->children[0]->name<<endl;
        }
    }
}

void codeGen_global_declare(Node* r){
    int i=0;
    int len=global.size();
    for(i;i<len;i++){
        if(global[i]->name==r->children[0]->name){
            break;
        }
    }
    if(r->children[1]==NULL){
        cout<<"v"+global[i]->global_index<<" = 0";
    }else{
        cout<<"v"+global[i]->global_index<<" = malloc "<<global[i]->array_eize<<endl;
    }
}

int allocate(Node* r, int id){
    if(r->local_symtab[id]->param_index>0){
        //是参数
        int index=r->local_symtab[id]->param_index+19;
        record[index]=id;
        r->local_symtab[id]->reg=index;
        return index;
    }
    for(int i=13;i<20;i++){
        if(record[i]==-1){
            record[i]=id;
            r->local_symtab[id]->reg=i;
            return i;
        }
    }
    for(int i=1;i<12;i++){
        if(record[i]==-1){
            record[i]=id;
            r->local_symtab[id]->reg=i;
            return i;
        }
    }
    return 0;
}

void delete_reg(Node* func,int st_idx, int id){
    if(st_idx+1==func->children[2]->mem.size()){
        return;
    }
    if(func->local_symtab[id]->reg>=9||func->local_symtab[id]->reg<=11){
        rerord[func->local_symtab[id]->reg]=0;
        func->local_symtab[id]->reg=0;
        return;
    }
    int flag=0;
    for(i=st_idx+1;i<func->children[2]->mem.size();i++){
        Node* st2=func->children[2]->mem[i];
        if(st2->live[id]==1){
            flag=1;
            break;
        }
    }
    if(flag==0){
        rerord[func->local_symtab[id]->reg]=0;
        func->local_symtab[id]->reg=0;
        return;
    }
}

void codeGen_13(Node* func, Node* st, int index){
    cout<<"return"<<endl;
}


void codeGen_1(Node* func, Node* st, int index){
    //ident T_ASSIGN rightval binop rightval
    int i0=get_index(func,st->children[0]->name);
    int reg0=func->local_symtab[i0]->reg;
    if(reg0==0){
        reg0=allocate(func,i0);
    }
    string op=st->children[2]->name;
    if(st->children[1]->rv_typ==1 && st->children[3]->rv_type==1){
        //ident
        int i1=get_index(func,st->children[1]->children[0]->name);
        int reg1=func->local_symtab[i1]->reg;
        if(reg1==0){
            reg1=allocate(func,i1);
            if(func->local_symtab[i1]->is_global==1){
                cout<<"load v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
            }
        }
        int i2=get_index(func,st->children[3]->children[0]->name);
        int reg2=func->local_symtab[i3]->reg;
        if(reg2==0){
            reg2=allocate(func,i2);
            if(func->local_symtab[i2]->is_global==1){
                cout<<"load v"<<func->local_symtab[i2]->global_index<<" "<<regs[reg2]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i2]->stack_location<<" "<<regs[reg2]<<endl;
            }
        }

        cout<<regs[reg0]<<" = "<<regs[reg1]<<" "<<op<<" "<<regs[reg2]<<endl;
        delete_reg(func,index,i0);
        delete_reg(func,index,i1);
        delete_reg(func,index,i2);
    }else if(st->children[1]->rv_typ==1 && st->children[3]->rv_type==2){
        int i1=get_index(func,st->children[1]->children[0]->name);
        int reg1=func->local_symtab[i1]->reg;
        if(reg1==0){
            reg1=allocate(func,i1);
            if(func->local_symtab[i1]->is_global==1){
                cout<<"load v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
            }
        }
        cout<<"s11 = "<<st->children[3]->children[0]->val;
        cout<<regs[reg0]<<" = "<<regs[reg1]<<" "<<op<<" "<<"s11"<<endl;
        delete_reg(func,index,i0);
        delete_reg(func,index,i1)
    }else if(st->children[1]->rv_typ==2 && st->children[3]->rv_type==1){
        int i2=get_index(func,st->children[3]->children[0]->name);
        int reg2=func->local_symtab[i2]->reg;
        if(reg2==0){
            reg2=allocate(func,i2);
            if(func->local_symtab[i2]->is_global==1){
                cout<<"load v"<<func->local_symtab[i2]->global_index<<" "<<regs[reg2]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i2]->stack_location<<" "<<regs[reg2]<<endl;
            }
        }
        cout<<"s11 = "<<st->children[1]->children[0]->val;
        cout<<regs[reg0]<<" = s11 "<<op<<" "<<regs[reg2]<<endl;
        delete_reg(func,index,i0);
        delete_reg(func,index,i2);
    }else if(st->children[1]->rv_type==2 && st->children[3]->rv_type==2){
        cout<<"s10 = "<<st->children[1]->children[0]->val;
        cout<<"s11 = "<<st->children[3]->children[0]->val;
        cout<<regs[reg0]<<" = s10 "<<op<<" s11"<<endl;
        delete_reg(func,index,i0);
    }
    if(func->local_symtab[i0]->is_global==1){
        cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }else if(reg0<=11&&reg0>=9){
        cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }
}

void codeGen_2(Node* func, Node* st, int index){
    //ident T_ASSIGN op rightval
    int i0=get_index(func,st->children[0]->name);
    int reg0=func->local_symtab[i0]->reg;
    if(reg0==0){
        reg0=allocate(func,i0);
    }
    string op=st->children[1]->name;
    if(st->children[2]->rv_type==1){
        int i1=get_index(func,st->children[2]->children[0]->name);
        int reg1=func->local_symtab[i1]->reg;
        if(reg1==0){
            reg1=allocate(func,i1);
            if(func->local_symtab[i1]->is_global==1){
                cout<<"load v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
            }
        }
        cout<<regs[reg0]<<" = "<<op<<" "<<regs[reg1]<<endl;
        delete_reg(func,index,i0);
        delete_reg(func,index,i1);
    }else{
        int temp=0;
        if(st->children[1]->name=="!"){
            temp=(int)(!st->children[2]->children[0]->val);
        }else if(st->children[1]->name=="-"){
            temp=(int)(-st->children[2]->children[0]->val);
        }
        cout<<regs[reg0]<<" = "<<temp<<endl;
        delete_reg(func,index,i0);
    }
    if(func->local_symtab[i0]->is_global==1){
        cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }else if(reg0<=11&&reg0>=9){
        cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }
}

void codeGen_3(Node* func, Node* st, int index){
    //ident T_ASSIGN rightval
    int i0=get_index(func,st->children[0]->name);
    int reg0=func->local_symtab[i0]->reg;
    if(reg0==0){
        reg0=allocate(func,i0);
    }
    if(st->children[1]->rv_type==1){
        int i1=get_index(func,st->children[1]->children[0]->name);
        int reg1=func->local_symtab[i1]->reg;
        if(reg1==0){
            reg1=allocate(func,i1);
            if(func->local_symtab[i1]->is_global==1){
                cout<<"load v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
            }
        }
        cout<<regs[reg0]<<" = "<<regs[reg1]<<endl;
        delete_reg(func,index,i0);
        delete_reg(func,index,i1);
    }else{
        int temp=st->children[1]->children[0]->val;
        cout<<regs[reg0]<<" = "<<temp<<endl;
        delete_reg(func,index,i0);
    }
    if(func->local_symtab[i0]->is_global==1){
        cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }else if(reg0<=11&&reg0>=9){
        cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }
}

void codeGen_4(Node* func, Node*st, int index){
    //ident T_LFANGKUOHAO rightval T_RFANGKUOHAO T_ASSIGN rightval
    int i0=get_index(func,st->children[0]->name);
    int reg0=func->local_symtab[i0]->reg;
    if(reg0==0){
        reg0=allocate(func,i0);
        if(func->local_symtab[i0]->is_global==1){
            cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" "<<regs[reg0]<<endl;
        }else{
            cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" "<<regs[reg0]<<endl;
        }
    }

    if(st->children[1]->rv_type==1&&st->children[2]->rv_type==1){
        int i1=get_index(func,st->children[1]->name);
        int reg1=func->local_symtab[i1]->reg;
        int i2=get_index(func,st->children[2]->name);
        int reg2=func->local_symtab[i2]->reg;
        if(reg1==0){
            reg1=allocate(func,i1);
            if(func->local_symtab[i1]->is_global==1){
                cout<<"load v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
            }
        }
        if(reg2==0){
            reg2=allocate(func,i2);
            if(func->local_symtab[i2]->is_global==1){
                cout<<"load v"<<func->local_symtab[i2]->global_index<<" "<<regs[reg2]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i2]->stack_location<<" "<<regs[reg2]<<endl;
            }
        }

        cout<<"s11 = "<<regs[reg0]<<" + "<<regs[reg1]<<endl;
        cout<<"s11[0] = "<<regs[reg2]<<endl;
        delete_reg(func, index,i0);
        delete_reg(func, index,i1);
        delete_reg(func, index,i2);
    }else if(st->children[1]->rv_type==2&&st->children[2]->rv_type==1){
        int i2=get_index(func,st->children[2]->name);
        int reg2=func->local_symtab[i2]->reg;
        if(reg2==0){
            reg2=allocate(func,i2);
            if(func->local_symtab[i2]->is_global==1){
                cout<<"load v"<<func->local_symtab[i2]->global_index<<" "<<regs[reg2]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i2]->stack_location<<" "<<regs[reg2]<<endl;
            }
        }

        cout<<regs[reg0]<<"["<<st->children[1]->children[0]->val<<"] = "<<regs[reg2]<<endl;
        delete_reg(func, index,i0);
        delete_reg(func, index,i2);
    }else if(st->children[1]->rv_type==1&&st->children[2]->rv_type==2){
        int i1=get_index(func,st->children[1]->name);
        int reg1=func->local_symtab[i1]->reg;
        if(reg1==0){
            reg1=allocate(func,i1);
            if(func->local_symtab[i1]->is_global==1){
                cout<<"load v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
            }
        }

        cout<<"s11 = "<<regs[reg0]<<" + "<<regs[reg1]<<endl;
        cout<<"s11[0] = "<<st->children[2]->children[0]->val<<endl;
        delete_reg(func, index,i0);
        delete_reg(func, index,i1);
    }else if(st->children[1]->rv_type==w&&st->children[2]->rv_type==2){
        cout<<regs[reg0]<<"["<<st->children[1]->children[0]->val<<"] = "<<st->children[2]->children[0]->val<<endl;
        delete_reg(func, i0);
    }
}

void codeGen_5(Node* func, Node* st, int index){
    //ident T_ASSIGN ident T_LFANGKUOHAO rightval T_RFANGKUOHAO
    int i0=get_index(func,st->children[0]->name);
    int reg0=func->local_symtab[i0]->reg;
    if(reg0==0){
        reg0=allocate(func,i0);
    }
    int i1=get_index(func,st->children[1]->name);
    int reg1=func->local_symtab[i1]->reg;
    if(reg1==0){
        reg1=allocate(func,i1);
        if(func->local_symtab[i1]->is_global==1){
            cout<<"loadaddr v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
        }else{
            cout<<"loadaddr "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
        }
    }

    if(st->children[2]->rv_type==1){
        int i2=get_index(func,st->children[2]->name);
        int reg2=func->local_symtab[i2]->reg;
        if(reg2==0){
            reg2=allocate(func,i2);
            if(func->local_symtab[i2]->is_global==1){
                cout<<"load v"<<func->local_symtab[i2]->global_index<<" "<<regs[reg2]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i2]->stack_location<<" "<<regs[reg2]<<endl;
            }
        }
        cout<<"s11 = "<<regs[reg1]<<" + "<<regs[reg2]<<endl;
        cout<<regs[reg0]<<" = s11[0]"<<endl;

        delete_reg(func,index,i0);
        delete_reg(func,index,i1);
        delete_reg(func,index,i2);
    }else if(st->children[2]->rv_type==2){
        cout<<regs[reg0]<<" = "<<regs[reg1]<<"["+st->children[2]->children[0]->val<<"]"<<endl;

        delete_reg(func,index,i0);
        delete_reg(func,index,i1);
    }

    if(func->local_symtab[i0]->is_global==1){
        cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }else if(reg0<=11&&reg0>=9){
        cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }
}

void codeGen_6(Node* func, Node* st, int index){
    //T_IF rightval logicop rightval T_GOTO label
    string op=st->children[1]->name;
    string label=st->children[3]->name;
    if(st->children[0]->rv_type==1&&st->children[2]->rv_type==1){
        int i0=get_index(func,st->children[0]->children[0]->name);
        int reg0=func->local_symtab[i0]->reg;
        if(reg0==0){
            reg0=allocate(func,i0);
            if(func->local_symtab[i0]->is_global==1){
                cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" "<<regs[reg0]<<endl;
            }else{
                cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" "<<regs[reg0]<<endl;
            }
        }   
        int i1=get_index(func,st->children[2]->children[0]->name);
        int reg1=func->local_symtab[i1]->reg;
        if(reg1==0){
            reg1=allocate(func,i1);
            if(func->local_symtab[i1]->is_global==1){
                cout<<"loadaddr v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
            }else{
                cout<<"loadaddr "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
            }
        }
        cout<<"if "<<regs[reg0]<<<<" "<<op<<" "<<regs[reg1]<<" goto "<<label<<endl;

        delete_reg(func,index,i0);
        delete_reg(func,index,i1);
    }else if(st->children[0]->rv_type==2&&st->children[2]->rv_type==1){
        int i1=get_index(func,st->children[2]->children[0]->name);
        int reg1=func->local_symtab[i1]->reg;
        if(reg1==0){
            reg1=allocate(func,i1);
            if(func->local_symtab[i1]->is_global==1){
                cout<<"loadaddr v"<<func->local_symtab[i1]->global_index<<" "<<regs[reg1]<<endl;
            }else{
                cout<<"loadaddr "<<func->local_symtab[i1]->stack_location<<" "<<regs[reg1]<<endl;
            }
        }
        cout<<"s11 = "<<st->children[0]->children[0]->val<<endl;
        cout<<"if s11 "<<op<<" "<<regs[reg1]<<" goto "<<label<<endl;

        delete_reg(func,index,i1);
    }else if(st->children[0]->rv_type==1&&st->children[2]->rv_type==2){
        int i0=get_index(func,st->children[0]->children[0]->name);
        int reg0=func->local_symtab[i0]->reg;
        if(reg0==0){
            reg0=allocate(func,i0);
            if(func->local_symtab[i0]->is_global==1){
                cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" "<<regs[reg0]<<endl;
            }else{
                cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" "<<regs[reg0]<<endl;
            }
        }   
        cout<<"s11 = "<<st->children[2]->children[0]->val<<endl;
        cout<<"if "<<regs[reg0]<<<<" "<<op<<" s11 goto "<<label<<endl;

        delete_reg(func,index,i0);
    }else if(st->children[0]->rv_type==1&&st->children[2]->rv_type==2){
        cout<<"s11 = "<<st->children[2]->children[0]->val<<endl;
        cout<<"s10 = "<<st->children[0]->children[0]->val<<endl;
        cout<<"if s10 "<<op<<" s11 goto "<<label<<endl;
    }
}

void codeGen_7(Node* func, Node* st, int index){
    cout<<"goto "<<st->children[0]->name<<endl;
}

void codeGen_8(Node* func, Node* st, int index){
    cout<<st->children[0]->name<<":"<<endl;
}

void codeGen_9(Node* func, Node* st, int index){
    //T_PARAM rightval
    if(param_count==0){
        for(int i=20;i<=27;i++){
            if(record[i]==-1){
                cout<<"store "<<regs[i]<<func->local_symtab[regs[i]]->stack_location<<endl;
            }
        }
    }

    if(st->children[0]->rv_type==1){
        int i0=get_index(func, st->children[0]->children[0]->name);
        int reg0=func->local_symtab[i0]->reg;
        if(reg0==0){
            reg0=allocate(func,i0);
            if(func->local_symtab[i0]->is_global==1){
                if(func->local_symtab[i0]->is_array==0){
                    cout<<"load v"<<func->local_symtab[i0]->global_index<<" "<<regs[reg0]<<endl;
                }else{
                    cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" "<<regs[reg0]<<endl;
                }
            }else{
                if(func->local_symtab[i0]->is_array==0){
                    cout<<"load "<<func->local_symtab[i0]->stack_location<<" "<<regs[reg0]<<endl;
                }else{
                    cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" "<<regs[reg0]<<endl;
                }
            }
        }
        if(reg0>=20&&reg0<=27){
            cout<<"load "<<func->local_symtab[record[reg0]]->stack_location<<" "<<regs[reg0]<<endl;
        }else{
            cout<<regs[param_count+20]<<" = "<<regs[reg0];
        }
        delete_reg(func,index,i0);
    }else{
        cout<<regs[param_count]<<" = "<<st->children[0]->children[0]->val<<endl;
    }
    param_count++;
}

void codeGen_10(Node* func, Node* st, int index){
    //T_CALL funcname
    param_count=0;
    cout<<"call "<<st->children[0]->name<<endl;
}

void codeGen_11(Node* func, Node* st, int index){
    param_count=0;
    int len=func->local_symtab.size();
    for(int i=0;i<len;i++){
        if(func->local_symtab[i]->reg==0){
            continue;
        }else if(func->local_symtab[i]->param_index>0){
            continue;
        }else if(func->local_symtab[i]->is_global==1){
            continue;
        }else if(func->local_symtab[i]->array_size>0){
            continue;
        }

        cout<<"store "<<regs[func->local_symtab[i]->reg]<<" "<<func->local_symtab[i]->stack_location<<endl;
    }

    int i0=get_index(func,st->children[0]->name);
    int reg0=func->local_symtab[i0]->reg;
    if(reg0==0){
        reg0=allocate(func,i0);
    }
    cout<<"call "<<st->children[1]->name<<endl;
    cout<<regs[reg0]<<" = a0"<<endl;
    delete_reg(func,index,i0)<<endl;

    if(func->local_symtab[i0]->is_global==1){
        cout<<"loadaddr v"<<func->local_symtab[i0]->global_index<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }else if(reg0>=9&&reg0<=11){
        cout<<"loadaddr "<<func->local_symtab[i0]->stack_location<<" s11"<<endl;
        cout<<"s11[0] = "<<regs[reg0]<<endl;
    }


    for(int i=0;i<len;i++){
        if(func->local_symtab[i]->reg==0){
            continue;
        }else if(func->local_symtab[i]->reg==reg0){
            continue;
        }else if(func->local_symtab[i]->is_global==1){
            if(func->local_symtab[i]->array_size==0){
                cout<<"load v"<<func->local_symtab[i]->global_index<<" "<<regs[func->local_symtab[i]->reg]<<endl;
            }else{
                cout<<"loadaddr v"<<func->local_symtab[i]->global_index<<" "<<regs[func->local_symtab[i]->reg]<<endl;
            }
        }else{
            if(func->local_symtab[i]->array_size==0){
                cout<<"load "<<func->local_symtab[i]->stack_location<<" "<<regs[func->local_symtab[i]->reg]<<endl;
            }else{
                cout<<"loadaddr "<<func->local_symtab[i]->stack_location<<" "<<regs[func->local_symtab[i]->reg]<<endl;
            }
        }
    }
}

void codeGen_12(Node* func, Node*st, int index){
    //return rv
    if(st->children[0]->rv_type==2){
        cout<<"a0 = "<<st->children[0]->children[0]->val<<endl;
    }else{
        int i0=get_index(st->children[0]->children[0]->name);
        int reg0=func->local_symtab[i0]->reg;
        if(reg0==0){
            reg0=allocate(func,i0);
            if(func->local_symtab[i0]->is_global==1){
                cout<<"load v"<<func->local_symtab[i0]->global_index<<" "<<regs[reg0]<<endl;
            }else{
                cout<<"load "<<func->local_symtab[i0]->stack_location<<" "<<regs[reg0]<<endl;
            }
        }
        cout<<"a0 = "<<regs[reg0]<<endl;
        delete_reg(func,index,i0);
    }
    cout<<"return"<<endl;
}

